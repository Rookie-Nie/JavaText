解决传递中文问题

现象:
当我们在页面中输入中文，并传递给服务端时，服务端接收到的参数格式如下(以GET请求为例):
在登录页面上用户名输入:范传奇 密码输入123456
提交的路径:
/loginUser?username=%E8%8C%83%E4%BC%A0%E5%A5%87&password=123456
用户名的值看着像"乱码"

原因:
因为表单以GET请求提交时，参数会被包含在请求的抽象路径中在"?"右面。HTTP协议要求请求行
消息头使用的字符集为ISO8859-1，该字符集不支持中文。因此参数被包含在请求路径中，而请求
路径又在本次请求的请求行中：
GET /loginUser?username=%E8%8C%83%E4%BC%A0%E5%A5%87&password=123456 HTTP/1.1
因此不能违背协议要求的字符集，所以不能直接传递中文。

怎么办?
思路:用支持的字符来表达不支持的字符。
支持的字符:英文，数字，符号。
数字是支持的字符，因此'0'和'1'可用。

因此，我们现将中文用UTF-8编码转换为一组字节
例如:
"范"---UTF-8--->11101000 10001100 10000011

因此我们用字符'0'和'1'来表达转换出来的所有2进制
因此:
/loginUser?username=范&password=123456
实际可以为:
/loginUser?username=111010001000110010000011&password=123456
如果服务端接收到后将它看做2进制，再利用UTF-8还原即可得到"范"

问题解决了，新的问题出现了
值太长。导致的问题是会影响传输速度。
为了尽量缩短长度，而又不能违背字符集要求，因此解决办法:将2进制用16进制表示

二进制          十进制            十六进制
0000            0                   0
0001            1                   1
0010            2                   2
0011            3                   3
0100            4                   4
0101            5                   5
0110            6                   6
0111            7                   7
1000            8                   8
1001            9                   9
1010            10                  A
1011            11                  B
1100            12                  C
1101            13                  D
1110            14                  E
1111            15                  F

2进制表示:
/loginUser?username=111010001000110010000011&password=123456
换为16进制表示:
/loginUser?username=E88C83&password=123456
长度在满足支持的字符的同时尽量的缩短了。

长度问题解决了，新的问题产生了:
如何与实际的英文数字组合的值区分开?
比如:
一个人注册时，他为自己取的名字就叫"E88C83"
服务端接收到是将该值当做16进制看待并最终转换为"范"，还是该值就是原本的"E88C83"?
为了解决这个问题，URL格式规定，如果应英文+数字表达的是16进制，则要求每2位16进制前必须
添加一个符号"%"
因此，如果该人名字就叫"E88C83",传递时如下:
/loginUser?username=E88C83&password=123456

如果该值为中文转换得2进制对应的16进制内容时:
/loginUser?username=%E8%8C%83&password=123456

服务端如何还原数据呢?
java提供了线程的API:URLDecoder
















